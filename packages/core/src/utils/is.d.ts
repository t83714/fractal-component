import { Action } from "redux";
export type GuardPredicate<G extends T, T = any> = (arg: T) => arg is G;

export const undef: GuardPredicate<undefined>;
export const notUndef: GuardPredicate<any>;
export const func: GuardPredicate<Function>;
export const number: GuardPredicate<number>;
export const string: GuardPredicate<string>;
export const array: GuardPredicate<Array<any>>;
export const object: GuardPredicate<object>;
export const promise: GuardPredicate<Promise<any>>;
export const iterator: GuardPredicate<Iterator<any>>;
export const iterable: GuardPredicate<Iterable<any>>;
export const observable: GuardPredicate<{ subscribe: Function }>;
export const buffer: GuardPredicate<Buffer<any>>;
export const pattern: GuardPredicate<Pattern<any> | ActionPattern>;
export const channel: GuardPredicate<Channel<any>>;
export const stringableFunc: GuardPredicate<Function>;
export const symbol: GuardPredicate<symbol>;
export const bool: GuardPredicate<boolean>;
export const action: GuardPredicate<Action<symbol>>;
export const namespacedAction: GuardPredicate<Action<symbol>>;
